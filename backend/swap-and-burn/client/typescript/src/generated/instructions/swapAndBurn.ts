/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category SwapAndBurn
 * @category generated
 */
const swapAndBurnStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'SwapAndBurnInstructionArgs'
)
/**
 * Accounts required by the _swapAndBurn_ instruction
 * @category Instructions
 * @category SwapAndBurn
 * @category generated
 */
export type SwapAndBurnInstructionAccounts = {
  pool: web3.PublicKey
  sendVault: web3.PublicKey
  receiveVault: web3.PublicKey
  burnFromMint: web3.PublicKey
  swapToMint: web3.PublicKey
  source: web3.PublicKey
  destination: web3.PublicKey
  owner: web3.PublicKey
}

const swapAndBurnInstructionDiscriminator = [
  238, 187, 75, 164, 53, 245, 200, 172,
]

/**
 * Creates a _SwapAndBurn_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 *
 * @category Instructions
 * @category SwapAndBurn
 * @category generated
 */
export function createSwapAndBurnInstruction(
  accounts: SwapAndBurnInstructionAccounts
) {
  const {
    pool,
    sendVault,
    receiveVault,
    burnFromMint,
    swapToMint,
    source,
    destination,
    owner,
  } = accounts

  const [data] = swapAndBurnStruct.serialize({
    instructionDiscriminator: swapAndBurnInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: pool,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: sendVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: receiveVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: burnFromMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: swapToMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: source,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: destination,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: owner,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'v32YSnVQDJfpVZm21APm5V7j1R3xCKU6VbsZRtAXb9A'
    ),
    keys,
    data,
  })
  return ix
}
